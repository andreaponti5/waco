{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>WaCo is a library for simulating contaminations in water networks built on-top of the WNTR library. For detailed info refer to the documentation.</p>"},{"location":"#installation","title":"Installation","text":"<p>The only requirement is the WNTR library that is used for the hydraulic simulations:</p> <ul> <li>Python &gt;= 3.9</li> <li>wntr &gt;= 1.1.0</li> </ul> <p>The latest release of WaCo can be easily installed via <code>pip</code>.</p> <pre><code>pip install waco\n</code></pre> <p>You can also install the latest developement version directly from GitHub.</p> <pre><code>pip install --upgrade git+https://github.com/andreaponti5/waco\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<p>WaCo is composed by two modules:</p> <ul> <li><code>sim</code>: contains the functionalities to perform hydraulic simulations for extracting the demands and the contaminant diffusion in water networks. It mainly acts as a wrapper around the WNTR library.</li> <li><code>analyzer</code>: contains the functionalities to extract the detection times and the volumes of contaminated water from the simulations.</li> </ul> <p>Note</p> <p>Refer to the API Reference for more details about the two modules.</p> <p>To extract the detection times you need to simulate the diffusion of contaminant with the <code>sim</code> and then use the <code>analyzer</code> module.</p> <pre><code>import waco\nimport wntr\n\nwn = wntr.network.WaterNetworkModel(\"examples/networks/Anytown.inp\")\ntrace = waco.sim.contamination(wn=wn)\ndet_time = waco.analyzer.detection_time(trace)\n</code></pre> <p>The detection times are returned in a Dataframe containing the time when the contaminant exceeds a given threshold in a node considering a specific injection point.</p> node inj_node time 1 1 0 1 2 18900 ... ... ... 9 21 18900 9 22 5400 <p>To extract the volume of contaminated water prior detection you also need to compute the demand at each node using the <code>sim</code> module.</p> <pre><code>demand = waco.sim.water_demand(wn)\ncontam_vol = waco.analyzer.contaminated_volume(trace=trace,\n                                               det_time=det_time,\n                                               demand=demand)\n</code></pre> <p>The volumes are returned in a Dataframe containing the volume of contaminated water prior detection in each node considering a specific injection point.</p> node inj_node volume 1 1 0.031545 1 2 0.116008 ... ... ... 9 21 0.118453 9 22 0.102254"},{"location":"user_guide/","title":"User Guide","text":"<p>WaCo is built on top of WNTR, that is a wrapper of EPANET.</p> <pre><code>import waco\nimport wntr\n</code></pre>"},{"location":"user_guide/#read-the-water-network","title":"Read the water network","text":"<p>WaCo uses the <code>WaterNetworkModel</code> provided by WNTR to manage EPANET networks (with <code>.inp</code> extension). Some example networks are provided in the <code>examples/networks</code> directory.</p> <pre><code># Read and plot the water network using wntr\nwn = wntr.network.WaterNetworkModel(\"examples/networks/Anytown.inp\")\nwntr.graphics.plot_network(wn);\n</code></pre>"},{"location":"user_guide/#run-simulations-to-analyze-the-diffusion-of-a-contaminant","title":"Run simulations to analyze the diffusion of a contaminant","text":"<p>WaCo allows to simply analyze the diffusion of a contaminant in the network, considering different injection points, by using the <code>waco.sim.contamination</code> function. This function runs a water quality simulation for each injection points specified by the parameter <code>inj_nodes</code>; by default, all the junctions of the network are considered as injection points. For each simulation, the varying contaminant concentration (percentage) is tracked across the entire network.</p> <pre><code>trace = waco.sim.contamination(wn=wn)\n</code></pre> <p>This results in a dataframe in which, each column represents an injection node (except for the \"time\" and \"node\" columns that are row ids) and each row represents the contaminant concentration in a node of the network at a specific simulation time for all the injection nodes.</p> time node 1 2 ... 21 22 25200 6 32.408066 14.922180 ... 34.149334 25.908562 25200 7 32.408066 14.922180 ... 34.149334 25.908562 25200 8 32.408066 14.922180 ... 34.149334 25.908562 25200 9 8.921225 0.914897 ... 8.870847 65.627129 25200 10 12.547630 0.000000 ... 0.000000 84.482864 <p>Let's print some details:</p> <pre><code>print(f\"Columns: {list(trace.columns)}\")\nprint(f\"Simulation timesteps: {trace['time'].unique().tolist()}\")\nprint(f\"Water network nodes: {trace['node'].unique().tolist()}\")\n</code></pre> <p>The output is:</p> <pre><code>Columns: ['time', 'node', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22']\nSimulation timesteps: [0, 3600, 7200, 10800, 14400, 18000, 21600, 25200, 28800, 32400, 36000, 39600, 43200, 46800, 50400, 54000, 57600, 61200, 64800, 68400, 72000, 75600, 79200, 82800, 86400]\nWater network nodes: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '40', '41', '42']\n</code></pre> <p>It is possible to change the injection nodes as well as the simulation duration and timestep (in seconds).  In the following example, the injection points are limited to the nodes with ids <code>1</code>, <code>2</code>, <code>21</code> and <code>22</code>, the simulation duration is set to 5 hours and data are registered every 15 minutes.</p> <pre><code>trace = waco.sim.contamination(wn=wn,\n                               inj_nodes=[\"1\", \"2\", \"21\", \"22\"],\n                               duration=5 * 3600,  # 5 hours\n                               timestep=15 * 60)   # 15 minutes\n</code></pre> <p>The result looks like the following:</p> time node 1 2 21 22 0 1 100.0 0.0 0.0 0.0 0 2 0.0 100.0 0.0 0.0 ... ... ... ... ... ... 18000 16 55.391529 0.0 9.2 21.9 18000 17 12.067455 0.0 0.0 85.5"},{"location":"user_guide/#compute-the-detection-times","title":"Compute the Detection Times","text":"<p>A useful insight is how long it takes to detect the contaminant at a specific location of the network (e.g., node). Considering that the contaminant is detected at a node when it exceeds a concentration percentage (<code>sensibility</code>), the function <code>waco.analyzer.detection_time</code> can be used to compute the detection times.</p> <pre><code>det_time = waco.analyzer.detection_time(trace, sensibility=5)\n</code></pre> <p>The result is a Dataframe with the time the contaminant concentration reach the specified threshold (i.e., <code>sensibility</code>) in <code>node</code> when injected in <code>inj_node</code>.</p> node inj_node time 1 1 0 1 2 18900 ... ... ... 9 21 18900 9 22 5400"},{"location":"user_guide/#compute-the-volumes-of-contaminated-water","title":"Compute the Volumes of Contaminated Water","text":"<p>Another information that can be extracted from the simulations is the volume of contaminated water consumed prior to detection. First, the water demands at each node have to be computed using the <code>waco.sim.demand</code> function. Then, the <code>waco.analyzer.contaminated_volume</code> function can be used to compute the volume of contaminated water.</p> <p>Note</p> <p>The same time granularity (<code>duration</code> and <code>timestep</code>) is required for both the <code>demand</code> and <code>trace</code> to be able to compute the volume of contaminated water.</p> <pre><code>demand = waco.sim.water_demand(wn, \n                               duration=5 * 3600, # 5 hours\n                               timestep=15 * 60)  # 15 minutes\ncontam_vol = waco.analyzer.contaminated_volume(trace=trace,\n                                               det_time=det_time,\n                                               demand=demand)\n</code></pre> <p>The demands are returned as a Dataframe with the water demand at each <code>node</code> and <code>time</code>.</p> time node demand 0 1 0.031545 0 2 0.012618 ... ... ... 18000 18 0.031545 18000 19 0.063090 <p>Then, the volume of contaminated water is returned as a Dataframe with a structure similar to the detection times.</p> node inj_node volume 1 1 0.031545 1 2 0.116008 ... ... ... 9 21 0.118453 9 22 0.102254"},{"location":"api_reference/analyzer/","title":"Extract Data from Simulations","text":""},{"location":"api_reference/analyzer/#waco.analyzer","title":"analyzer","text":""},{"location":"api_reference/analyzer/#waco.analyzer.contaminated_volume","title":"contaminated_volume","text":"<pre><code>contaminated_volume(trace: pd.DataFrame, demand: pd.DataFrame, det_time: pd.DataFrame) -&gt; pd.DataFrame\n</code></pre> <p>Compute, for each pair (node, injection node), the volume of contaminated water consumed prior to detection.</p> <p>Parameters:</p> <ul> <li> <code>trace</code>             (<code>DataFrame</code>)         \u2013          <p>A pandas Dataframe containing the contaminant trace (percentage) for each injection points in each node. </p> <p>The Dataframe has the following columns: </p> <ul> <li> <p><code>time</code>: Simulation time in seconds. </p> </li> <li> <p><code>node</code>: Node of the water network to which the trace refers. </p> </li> <li> <p><code>&lt;node_id1&gt;</code>, ..., <code>&lt;node_idN&gt;</code>: Nodes of the water network where the contaminant has been injected. </p> </li> </ul> <p>This Dataframe can be obtained calling <code>waco.sim.contamination</code>.</p> </li> <li> <code>demand</code>             (<code>DataFrame</code>)         \u2013          <p>A pandas Dataframe with the demand at each node for each simulation timestep. </p> <p>The Dataframe has to have the following columns: </p> <ul> <li> <p><code>time</code>: Simulation time in seconds. </p> </li> <li> <p><code>node</code>: Node of the water network. </p> </li> <li> <p><code>demand</code>: Demand at <code>node</code> in the simulation timestep identified by <code>time</code>. </p> </li> </ul> <p>This Dataframe can be obtained calling waco.sim.demand.</p> </li> <li> <code>det_time</code>             (<code>DataFrame</code>)         \u2013          <p>A pandas Dataframe with the detection times for each pair (node, injection_node). </p> <p>The Dataframe has to have the following columns: </p> <ul> <li> <p><code>node</code>: The \"observer\" node of the water network. </p> </li> <li> <p><code>inj_node</code>: The node of the water network where the contaminant has been injected. </p> </li> <li> <p><code>time</code>: The first simulation timestep when the contaminant concentration in <code>node</code> exceeds <code>sensibility</code>,     when the contaminant has been injected in <code>inj_node</code>. </p> </li> </ul> <p>This Dataframe can be obtained calling waco.analyzer.contaminated_volume.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DataFrame</code>         \u2013          <p>A pandas Dataframe with the volume of contaminated water consumed prior detection for each pair (node, injection_node). </p> <p>The Dataframe has the following columns: </p> <pre><code>- `node`: The \"observer\" node of the water network.\n\n- `inj_node`: The node of the water network where the contaminant has been injected.\n\n- `volume`: The contaminated water consumed prior detection.\n</code></pre> </li> </ul> Source code in <code>waco/analyzer.py</code> <pre><code>def contaminated_volume(\n        trace: pd.DataFrame,\n        demand: pd.DataFrame,\n        det_time: pd.DataFrame,\n) -&gt; pd.DataFrame:\n    \"\"\"Compute, for each pair (node, injection node), the volume of contaminated water consumed prior to detection.\n\n    Args:\n        trace: A pandas Dataframe containing the contaminant trace (percentage) for\n            each injection points in each node. \\n\n            The Dataframe has the following columns: \\n\n            - `time`: Simulation time in seconds. \\n\n            - `node`: Node of the water network to which the trace refers. \\n\n            - `&lt;node_id1&gt;`, ..., `&lt;node_idN&gt;`: Nodes of the water network where the contaminant has been injected. \\n\n            This Dataframe can be obtained calling `waco.sim.contamination`.\n        demand: A pandas Dataframe with the demand at each node for each simulation timestep. \\n\n            The Dataframe has to have the following columns: \\n\n            - `time`: Simulation time in seconds. \\n\n            - `node`: Node of the water network. \\n\n            - `demand`: Demand at `node` in the simulation timestep identified by `time`. \\n\n            This Dataframe can be obtained calling waco.sim.demand.\n        det_time: A pandas Dataframe with the detection times for each pair (node, injection_node). \\n\n            The Dataframe has to have the following columns: \\n\n            - `node`: The \"observer\" node of the water network. \\n\n            - `inj_node`: The node of the water network where the contaminant has been injected. \\n\n            - `time`: The first simulation timestep when the contaminant concentration in `node` exceeds `sensibility`,\n                when the contaminant has been injected in `inj_node`. \\n\n            This Dataframe can be obtained calling waco.analyzer.contaminated_volume.\n\n    Returns:\n        A pandas Dataframe with the volume of contaminated water consumed prior detection for each pair\n            (node, injection_node). \\n\n            The Dataframe has the following columns: \\n\n                - `node`: The \"observer\" node of the water network. \\n\n                - `inj_node`: The node of the water network where the contaminant has been injected. \\n\n                - `volume`: The contaminated water consumed prior detection.\n    \"\"\"\n    max_sim_time = trace[\"time\"].max()\n    det_time[\"time\"] = det_time[\"time\"].astype(int)\n    scenario_names = list(trace.columns)\n    scenario_names.remove(\"time\")\n    scenario_names.remove(\"node\")\n    # Compute the volume of contaminated water consumed in the different scenarios for each simulation timestep\n    contam_vol = trace[scenario_names].mul(0.01 * demand[\"demand\"], axis=0)\n    contam_vol[\"time\"] = trace[\"time\"]\n    contam_vol = contam_vol.groupby([\"time\"]).sum().stack()\n    # Compute the volume of contaminated water consumed prior detection\n    idxs = det_time[[\"time\", \"inj_node\"]].to_numpy()\n    idxs[np.where(idxs[:, 0] &gt; max_sim_time), 0] = max_sim_time\n    contam_vol = contam_vol[pd.MultiIndex.from_tuples(idxs.tolist())]\n    contam_vol = pd.DataFrame({\"node\": det_time[\"node\"].tolist(),\n                               \"inj_node\": det_time[\"inj_node\"].tolist(),\n                               \"volume\": contam_vol.tolist()})\n    return contam_vol\n</code></pre>"},{"location":"api_reference/analyzer/#waco.analyzer.detection_time","title":"detection_time","text":"<pre><code>detection_time(trace: pd.DataFrame, sensibility: float = 1, non_detection_value: float = None) -&gt; pd.DataFrame\n</code></pre> <p>Compute, for each pair (node, injection node), the time contaminant needs to reach a concentration greater than <code>sensibility</code> in <code>node</code> if injected in <code>injection_node</code>.</p> <p>Parameters:</p> <ul> <li> <code>trace</code>             (<code>DataFrame</code>)         \u2013          <p>A pandas Dataframe containing the contaminant trace (percentage) for each injection points in each node. </p> <p>The Dataframe has the following columns: </p> <ul> <li> <p><code>time</code>: Simulation time in seconds. </p> </li> <li> <p><code>node</code>: Node of the water network to which the trace refers. </p> </li> <li> <p><code>&lt;node_id1&gt;</code>, ..., <code>&lt;node_idN&gt;</code>: Nodes of the water network where the contaminant has been injected. </p> </li> </ul> <p>This Dataframe can be obtained calling waco.sim.contamination.</p> </li> <li> <code>sensibility</code>             (<code>float</code>, default:                 <code>1</code> )         \u2013          <p>The concentration (percentage) to consider a contaminant detected.</p> </li> <li> <code>non_detection_value</code>             (<code>float</code>, default:                 <code>None</code> )         \u2013          <p>The value to use if the concentration of contaminat in a node does not exceed <code>sensibility</code> in the simulation horizon.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DataFrame</code>         \u2013          <p>A pandas Dataframe with the detection times for each pair (node, injection_node). </p> <p>The Dataframe has the following columns: </p> <ul> <li> <p><code>node</code>: The \"observer\" node of the water network. </p> </li> <li> <p><code>inj_node</code>: The node of the water network where the contaminant has been injected. </p> </li> <li> <p><code>time</code>: The first simulation timestep when the contaminant concentration in <code>node</code> exceeds <code>sensibility</code>,     when the contaminant has been injected in <code>inj_node</code>.</p> </li> </ul> </li> </ul> Source code in <code>waco/analyzer.py</code> <pre><code>def detection_time(\n        trace: pd.DataFrame,\n        sensibility: float = 1,\n        non_detection_value: float = None,\n) -&gt; pd.DataFrame:\n    \"\"\"Compute, for each pair (node, injection node), the time contaminant needs to reach a concentration greater\n    than `sensibility` in `node` if injected in `injection_node`.\n\n    Args:\n        trace: A pandas Dataframe containing the contaminant trace (percentage) for\n            each injection points in each node. \\n\n            The Dataframe has the following columns: \\n\n            - `time`: Simulation time in seconds. \\n\n            - `node`: Node of the water network to which the trace refers. \\n\n            - `&lt;node_id1&gt;`, ..., `&lt;node_idN&gt;`: Nodes of the water network where the contaminant has been injected. \\n\n            This Dataframe can be obtained calling waco.sim.contamination.\n        sensibility: The concentration (percentage) to consider a contaminant detected.\n        non_detection_value: The value to use if the concentration of contaminat in a node does\n            not exceed `sensibility` in the simulation horizon.\n\n    Returns:\n        A pandas Dataframe with the detection times for each pair (node, injection_node). \\n\n            The Dataframe has the following columns: \\n\n            - `node`: The \"observer\" node of the water network. \\n\n            - `inj_node`: The node of the water network where the contaminant has been injected. \\n\n            - `time`: The first simulation timestep when the contaminant concentration in `node` exceeds `sensibility`,\n                when the contaminant has been injected in `inj_node`. \\n\n    \"\"\"\n    if non_detection_value is None:\n        times = sorted(trace[\"time\"].unique())\n        non_detection_value = times[-1] + (times[-1] - times[-2])\n\n    def first_T_greater_than(series):\n        filtered_series = series[series &gt; sensibility]\n        return trace.loc[filtered_series.index[0], \"time\"] if not filtered_series.empty else None\n\n    det_time = trace.groupby(\"node\").agg(\n        {col: first_T_greater_than for col in trace.columns\n         if col not in [\"time\", \"node\"]}\n    )\n    det_time = det_time.fillna(non_detection_value).stack().reset_index()\n    det_time.columns = [\"node\", \"inj_node\", \"time\"]\n    return det_time\n</code></pre>"},{"location":"api_reference/sim/","title":"Water Simulation","text":""},{"location":"api_reference/sim/#waco.sim","title":"sim","text":""},{"location":"api_reference/sim/#waco.sim.contamination","title":"contamination","text":"<pre><code>contamination(wn: wntr.network.WaterNetworkModel, inj_nodes: Optional[List[Union[int, str]]] = None, duration: Optional[int] = 24 * 3600, timestep: Optional[int] = 3600, **kwargs: dict) -&gt; pd.DataFrame\n</code></pre> <p>Simulate the injection of contaminations in multiple nodes.</p> <p>The contaminant is injected at the beginning of the simulation.</p> <p>Parameters:</p> <ul> <li> <code>wn</code>             (<code>WaterNetworkModel</code>)         \u2013          <p>The WaterNetworkModel used in the simulations.</p> </li> <li> <code>inj_nodes</code>             (<code>Optional[List[Union[int, str]]]</code>, default:                 <code>None</code> )         \u2013          <p>The list of nodes ids considered as injection points. If None, all the junctions are considered as injection points.</p> </li> <li> <code>duration</code>             (<code>Optional[int]</code>, default:                 <code>24 * 3600</code> )         \u2013          <p>The simulation duration in seconds. By dafault, it is one day (86400 seconds).</p> </li> <li> <code>timestep</code>             (<code>Optional[int]</code>, default:                 <code>3600</code> )         \u2013          <p>The timestep of the simulation in seconds. By dafault, it is one hour (3600 seconds).</p> </li> <li> <code>**kwargs</code>             (<code>dict</code>, default:                 <code>{}</code> )         \u2013          <p>Additional arguments to pass to the Epanet simulator: </p> <ul> <li> <p>file_prefix (str): Default prefix is \"temp\". All files (.inp, .bin/.out, .hyd, .rpt) use this prefix. </p> </li> <li> <p>use_hyd (bool): Will load hydraulics from <code>file_prefix + '.hyd'</code> or from file specified in     <code>hydfile_name</code>. </p> </li> <li> <p>save_hyd (bool): Will save hydraulics to <code>file_prefix + '.hyd'</code>     or to file specified in <code>hydfile_name</code>. </p> </li> <li> <p>hydfile (str): Optionally specify a filename for the hydraulics file other than the <code>file_prefix</code>. </p> </li> <li> <p>version (float): Optionally change the version of the EPANET toolkit libraries. Valid choices are     either 2.2 (the default if no argument provided) or 2.0. </p> </li> <li> <p>convergence_error (bool): If convergence_error is True, an error will be raised if the     simulation does not converge. If convergence_error is False, partial results are returned,     a warning will be issued, and results.error_code will be set to 0     if the simulation does not converge. Default is False. </p> </li> </ul> </li> </ul> <p>Returns:</p> <ul> <li> <code>DataFrame</code>         \u2013          <p>A pandas Dataframe containing the contaminant trace (percentage) for each injection points in each node. </p> <p>The Dataframe has the following columns: </p> <ul> <li> <p><code>time</code>: Simulation time in seconds. </p> </li> <li> <p><code>node</code>: Node of the water network to which the trace refers. </p> </li> <li> <p><code>&lt;node_id1&gt;</code>, ..., <code>&lt;node_idN&gt;</code>: Nodes of the water network where the contaminant has been injected.</p> </li> </ul> </li> </ul> Source code in <code>waco/sim.py</code> <pre><code>def contamination(\n        wn: wntr.network.WaterNetworkModel,\n        inj_nodes: Optional[List[Union[int, str]]] = None,\n        duration: Optional[int] = 24 * 3600,\n        timestep: Optional[int] = 3600,\n        **kwargs: dict,\n) -&gt; pd.DataFrame:\n    \"\"\"Simulate the injection of contaminations in multiple nodes.\n\n    The contaminant is injected at the beginning of the simulation.\n\n    Args:\n        wn: The WaterNetworkModel used in the simulations.\n        inj_nodes: The list of nodes ids considered as injection points.\n            If None, all the junctions are considered as injection points.\n        duration: The simulation duration in seconds. By dafault, it is one day (86400 seconds).\n        timestep: The timestep of the simulation in seconds. By dafault, it is one hour (3600 seconds).\n        **kwargs: Additional arguments to pass to the Epanet simulator: \\n\n            - file_prefix (str): Default prefix is \"temp\". All files (.inp, .bin/.out, .hyd, .rpt) use this prefix. \\n\n            - use_hyd (bool): Will load hydraulics from ``file_prefix + '.hyd'`` or from file specified in\n                `hydfile_name`. \\n\n            - save_hyd (bool): Will save hydraulics to ``file_prefix + '.hyd'``\n                or to file specified in `hydfile_name`. \\n\n            - hydfile (str): Optionally specify a filename for the hydraulics file other than the `file_prefix`. \\n\n            - version (float): Optionally change the version of the EPANET toolkit libraries. Valid choices are\n                either 2.2 (the default if no argument provided) or 2.0. \\n\n            - convergence_error (bool): If convergence_error is True, an error will be raised if the\n                simulation does not converge. If convergence_error is False, partial results are returned,\n                a warning will be issued, and results.error_code will be set to 0\n                if the simulation does not converge. Default is False. \\n\n\n    Returns:\n        A pandas Dataframe containing the contaminant trace (percentage) for each injection points in each node. \\n\n            The Dataframe has the following columns: \\n\n            - `time`: Simulation time in seconds. \\n\n            - `node`: Node of the water network to which the trace refers. \\n\n            - `&lt;node_id1&gt;`, ..., `&lt;node_idN&gt;`: Nodes of the water network where the contaminant has been injected.\n    \"\"\"\n    wn = _set_config(copy.deepcopy(wn), duration=duration, timestep=timestep)\n    sim = wntr.sim.EpanetSimulator(wn)\n    wn.options.quality.parameter = \"TRACE\"\n    # If no injection nodes is specified, use the entire list of junctions\n    inj_nodes = wn.junction_name_list if inj_nodes is None else inj_nodes\n    trace = []\n    for i, node in enumerate(inj_nodes):\n        wn.options.quality.trace_node = node\n        sim_results = sim.run_sim(**kwargs)\n        curr_trace = sim_results.node[\"quality\"]\n        curr_trace = curr_trace.stack()\n        trace.append(curr_trace)\n    trace = pd.DataFrame(trace).T.reset_index()\n    trace.columns = [\"time\", \"node\"] + inj_nodes\n    _clean_tmp(kwargs.get(\"file_prefix\", \"temp\"))\n    return trace\n</code></pre>"},{"location":"api_reference/sim/#waco.sim.water_demand","title":"water_demand","text":"<pre><code>water_demand(wn: wntr.network.WaterNetworkModel, duration: Optional[int] = 24 * 3600, timestep: Optional[int] = 3600, **kwargs: dict) -&gt; pd.DataFrame\n</code></pre> <p>Run a simulation to extract the demand at each node.</p> <p>Parameters:</p> <ul> <li> <code>wn</code>             (<code>WaterNetworkModel</code>)         \u2013          <p>The WaterNetworkModel used in the simulation.</p> </li> <li> <code>duration</code>             (<code>Optional[int]</code>, default:                 <code>24 * 3600</code> )         \u2013          <p>The simulation duration in seconds. By dafault, it is one day (86400 seconds).</p> </li> <li> <code>timestep</code>             (<code>Optional[int]</code>, default:                 <code>3600</code> )         \u2013          <p>The timestep of the simulation in seconds. By dafault, it is one hour (3600 seconds).</p> </li> <li> <code>**kwargs</code>             (<code>dict</code>, default:                 <code>{}</code> )         \u2013          <p>Additional arguments to pass to the Epanet simulator: </p> <ul> <li> <p>file_prefix (str): Default prefix is \"temp\". All files (.inp, .bin/.out, .hyd, .rpt) use this prefix. </p> </li> <li> <p>use_hyd (bool): Will load hydraulics from <code>file_prefix + '.hyd'</code> or from file specified in     <code>hydfile_name</code>. </p> </li> <li> <p>save_hyd (bool): Will save hydraulics to <code>file_prefix + '.hyd'</code>     or to file specified in <code>hydfile_name</code>. </p> </li> <li> <p>hydfile (str): Optionally specify a filename for the hydraulics file other than the <code>file_prefix</code>. </p> </li> <li> <p>version (float): Optionally change the version of the EPANET toolkit libraries. Valid choices are     either 2.2 (the default if no argument provided) or 2.0. </p> </li> <li> <p>convergence_error (bool): If convergence_error is True, an error will be raised if the     simulation does not converge. If convergence_error is False, partial results are returned,     a warning will be issued, and results.error_code will be set to 0     if the simulation does not converge. Default is False. </p> </li> </ul> </li> </ul> <p>Returns:</p> <ul> <li> <code>DataFrame</code>         \u2013          <p>A pandas Dataframe with the demand at each node for each simulation timestep. </p> <p>The Dataframe has the following columns: </p> <ul> <li> <p><code>time</code>: Simulation time in seconds. </p> </li> <li> <p><code>node</code>: Node of the water network. </p> </li> <li> <p><code>demand</code>: Demand at <code>node</code> in the simulation timestep identified by <code>time</code>.</p> </li> </ul> </li> </ul> Source code in <code>waco/sim.py</code> <pre><code>def water_demand(\n        wn: wntr.network.WaterNetworkModel,\n        duration: Optional[int] = 24 * 3600,\n        timestep: Optional[int] = 3600,\n        **kwargs: dict,\n) -&gt; pd.DataFrame:\n    \"\"\"Run a simulation to extract the demand at each node.\n\n    Args:\n        wn: The WaterNetworkModel used in the simulation.\n        duration: The simulation duration in seconds. By dafault, it is one day (86400 seconds).\n        timestep: The timestep of the simulation in seconds. By dafault, it is one hour (3600 seconds).\n        **kwargs: Additional arguments to pass to the Epanet simulator: \\n\n            - file_prefix (str): Default prefix is \"temp\". All files (.inp, .bin/.out, .hyd, .rpt) use this prefix. \\n\n            - use_hyd (bool): Will load hydraulics from ``file_prefix + '.hyd'`` or from file specified in\n                `hydfile_name`. \\n\n            - save_hyd (bool): Will save hydraulics to ``file_prefix + '.hyd'``\n                or to file specified in `hydfile_name`. \\n\n            - hydfile (str): Optionally specify a filename for the hydraulics file other than the `file_prefix`. \\n\n            - version (float): Optionally change the version of the EPANET toolkit libraries. Valid choices are\n                either 2.2 (the default if no argument provided) or 2.0. \\n\n            - convergence_error (bool): If convergence_error is True, an error will be raised if the\n                simulation does not converge. If convergence_error is False, partial results are returned,\n                a warning will be issued, and results.error_code will be set to 0\n                if the simulation does not converge. Default is False. \\n\n\n    Returns:\n        A pandas Dataframe with the demand at each node for each simulation timestep. \\n\n            The Dataframe has the following columns: \\n\n            - `time`: Simulation time in seconds. \\n\n            - `node`: Node of the water network. \\n\n            - `demand`: Demand at `node` in the simulation timestep identified by `time`.\n    \"\"\"\n    wn = _set_config(copy.deepcopy(wn), duration=duration, timestep=timestep)\n    sim = wntr.sim.EpanetSimulator(wn)\n    sim_results = sim.run_sim(**kwargs)\n    _clean_tmp(kwargs.get(\"file_prefix\", \"temp\"))\n    demand = sim_results.node[\"demand\"].stack().reset_index()\n    demand.columns = [\"time\", \"node\", \"demand\"]\n    return demand\n</code></pre>"}]}